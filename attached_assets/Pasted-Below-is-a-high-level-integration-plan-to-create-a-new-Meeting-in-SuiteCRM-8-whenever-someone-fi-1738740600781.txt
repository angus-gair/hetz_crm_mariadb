Below is a high-level integration plan to create a new **Meeting** in SuiteCRM 8 whenever someone fills out a “Schedule a Consultation” form on your website. It walks through the main decisions (whether to use SuiteCRM’s out-of-the-box GraphQL create mutation vs. using a **custom Process Handler**), and then outlines a step-by-step approach to building, deploying, and testing the integration.

---

## 1. Decide on Your Approach

There are two common ways to create a Meeting in SuiteCRM 8 from an external form submission:

1. **Use the Built-in “Create Record” GraphQL Mutation**  
   - SuiteCRM 8’s GraphQL API includes a `createRecord` mutation (or a similar `create<Module>` mutation) for creating module records (including Meetings).
   - Your website’s backend can directly call `mutation { createRecord(...) { ... } }` and pass in the relevant fields (such as `name`, `date_start`, `description`, etc.).
   - Advantage:  
     - Simpler if all you need is to create a record with basic fields.  
   - Disadvantage:  
     - Less flexible if you need extra validation, custom ACL checks, or extra “logic hooks”-style processing before/after creation.

2. **Implement a Custom Process Handler**  
   - Create your own Process Handler class (as described in the **Process API** and **Adding a Process Handler** guides) that handles a new “create-meeting-from-website” process.
   - Your website’s backend calls a custom `mutation createProcess(...) { ... }` with `"type": "create-meeting-from-webform"` (or any processType you define).
   - Inside `run()`, your handler can do any custom logic (e.g., conditionally set fields, run validations, trigger other integrations), and finally create the Meeting record via SuiteCRM’s internal service layer or bean factory.
   - Advantage:  
     - You can incorporate robust or custom logic, ACL checks, or multi-record processes.  
   - Disadvantage:  
     - Slightly more complexity, requires you to implement and maintain a custom class in `extensions/<my-extension>/…`.

Both approaches are valid. If you just want to store the Meeting from a form fill, the simpler route is to use the built-in `createRecord` mutation. If you anticipate more advanced logic or custom checks in the future, a **Process Handler** will be more flexible. Below is a plan that focuses on **creating a dedicated Process Handler**, since that aligns with the documentation you shared.

---

## 2. High-Level Architecture

1. **Website Form** (“Schedule a Consultation”)
   - A typical HTML form capturing fields like:
     - Name
     - Email
     - Phone (optional)
     - Preferred date/time
     - Notes or message

2. **Website Backend Endpoint** (e.g., `POST /api/schedule-consultation`)
   - Once the user submits the form, your backend receives the form data.  
   - Your backend can use any language/framework (PHP, Node.js, Python, etc.).  

3. **Call SuiteCRM 8 GraphQL**  
   - Your backend will **authenticate** with SuiteCRM (likely using OAuth2 or an access token) and then call `createProcess` with:
     ```json
     {
       "input": {
         "type": "create-meeting-from-webform",
         "options": {
           "formData": {
             "name": "...",
             "email": "...",
             "phone": "...",
             "preferredDatetime": "...",
             "notes": "..."
           }
         }
       }
     }
     ```
   - `type` must match the `getProcessType()` in your custom Process Handler.

4. **Custom Process Handler** in SuiteCRM 8
   - You create a new PHP class implementing `ProcessHandlerInterface` (in `extensions/<my-extension>/backend/...`).
   - This handler:
     1. Validates the incoming data.
     2. Performs ACL checks (or skip them, depending on your scenario).
     3. Creates (or updates) a Meeting record via SuiteCRM’s internal service/bean logic.
     4. Returns any success/error messages back to the calling client.

5. **Response to Website**
   - The GraphQL response indicates success or error.
   - Your website backend can return a user-friendly success message or redirect the user to a “Thank you” page.

---

## 3. Step-by-Step Implementation Outline

### 3.1 Create the Folder Structure in SuiteCRM 8 Extensions

1. In your SuiteCRM 8 project, locate the `extensions/` folder.  
2. Create a new folder for your integration, e.g. `extensions/WebToMeeting/`.
3. Within that folder, mimic the structure for backend code. For example:
   ```
   extensions/WebToMeeting/backend/Process/Service/
   ```
   or (if you prefer to keep it module-specific):
   ```
   extensions/WebToMeeting/modules/Meetings/Service/
   ```
   The key point is the directory must be autoloaded by Symfony and recognized by SuiteCRM.  

### 3.2 Add the Custom Process Handler Class

Create a new PHP file in the folder you chose (example: `extensions/WebToMeeting/backend/Process/Service/CreateMeetingFromWebForm.php`).  
Below is a **bare-bones** template. Tweak names/fields as needed:

```php
<?php

namespace App\Extension\WebToMeeting\backend\Process\Service;

use ApiPlatform\Core\Exception\InvalidArgumentException;
use App\Process\Entity\Process;
use App\Process\Service\ProcessHandlerInterface;
use App\Entity\Meeting; // or use the BeanFactory approach

class CreateMeetingFromWebForm implements ProcessHandlerInterface
{
    public const PROCESS_TYPE = 'create-meeting-from-webform';

    public function __construct()
    {
        // If you need any dependencies, add them here and in services.yaml or rely on autowiring
    }

    /**
     * Unique key used by the ProcessHandlerRegistry
     */
    public function getProcessType(): string
    {
        return self::PROCESS_TYPE;
    }

    /**
     * Required auth role: 
     *  - 'ROLE_USER' means the SuiteCRM user must be logged in 
     *  - '' means no login required 
     *  - 'ROLE_ADMIN' means must be an admin user
     */
    public function requiredAuthRole(): string
    {
        // If your website is using a service user to authenticate, 'ROLE_USER' is typical.
        // If you want to allow non-auth user calls, return ''.
        return 'ROLE_USER';
    }

    /**
     * SuiteCRM ACL checks that must pass to run this process.
     * If you want minimal ACL enforcement, you can return an empty array
     */
    public function getRequiredACLs(Process $process): array
    {
        // If your site logs in as an internal user that has ACL rights to create Meetings, do:
        return [
            'Meetings' => [
                [ 'action' => 'edit' ]
            ],
        ];
    }

    /**
     * Called before run(). You can set the process as synchronous or asynchronous.
     */
    public function configure(Process $process): void
    {
        // Mark this process as synchronous
        $process->setId(self::PROCESS_TYPE);
        $process->setAsync(false);
    }

    /**
     * Validate input. If invalid, throw InvalidArgumentException
     */
    public function validate(Process $process): void
    {
        $options = $process->getOptions();
        
        if (empty($options['formData'])) {
            throw new InvalidArgumentException('No formData found in process options');
        }

        // Basic validation
        if (empty($options['formData']['name']) || empty($options['formData']['preferredDatetime'])) {
            throw new InvalidArgumentException('Missing required name or preferredDatetime');
        }
    }

    /**
     * The main logic. We create a Meeting in SuiteCRM based on the form data.
     */
    public function run(Process $process)
    {
        $options = $process->getOptions();
        $formData = $options['formData'];

        // EXAMPLE: Create a new Meeting via the BeanFactory approach or Doctrine entity approach.
        // Usually you can do something like:
        //
        // $meetingBean = BeanFactory::newBean('Meetings');
        // $meetingBean->name = 'Consultation with ' . $formData['name'];
        // $meetingBean->date_start = $formData['preferredDatetime']; // must be Y-m-d H:i:s
        // $meetingBean->description = $formData['notes'] ?? '';
        // ...
        // $meetingBean->save();

        // Or the new Doctrine approach:
        // $meeting = new Meeting();
        // $meeting->setName('Consultation with ' . $formData['name']);
        // $meeting->setDateStart(new \DateTime($formData['preferredDatetime']));
        // ...
        // $this->entityManager->persist($meeting);
        // $this->entityManager->flush();

        // For demonstration, we’ll just pretend it worked:
        $process->setStatus('success');
        $process->setMessages(['Meeting created successfully']);
        $process->setData([
            'meetingId' => '12345',  // You can return the actual ID
        ]);
    }
}
```

**Key Points to Note**:

- **`PROCESS_TYPE`**: Must match what you’ll send in the GraphQL call (`"type": "create-meeting-from-webform"`).  
- **`requiredAuthRole()`**: If your website authenticates as a standard SuiteCRM user, `ROLE_USER` is typical. If you want to allow anonymous calls (no auth), return an empty string.  
- **ACL**: If your service user has rights to create/edit Meetings, returning `'Meetings' => [['action' => 'edit']]` is often enough.  
- **`validate()`**: Enforce that the minimal fields exist.  
- **`run()`**: Actually create the Meeting record. You can use the Doctrine entity or BeanFactory approach.

### 3.3 Clear the Cache

After adding your new Process Handler PHP class:

1. Run `php bin/console cache:clear` in your SuiteCRM root (or manually delete the `cache/` folder contents if needed).  
2. Make sure file permissions are correct for your environment.

### 3.4 Configure Website to Call the Custom Process

In your **website backend**:

1. **Obtain an Access Token** from SuiteCRM 8 (via OAuth2 or the API login). Store it server-side.  
2. **Perform a GraphQL mutation** to `createProcess`:

   ```graphql
   mutation createProcess($input: createProcessInput!) {
     createProcess(input: $input) {
       process {
         _id
         status
         messages
         data
       }
     }
   }
   ```

   **POST Body** (JSON) example:
   ```json
   {
     "query": "mutation createProcess($input: createProcessInput!) { createProcess(input: $input) { process { _id status messages data } } }",
     "variables": {
       "input": {
         "type": "create-meeting-from-webform",
         "options": {
           "formData": {
             "name": "Jane Doe",
             "email": "jane@example.com",
             "phone": "+1 555 123 4567",
             "preferredDatetime": "2025-12-15 14:00:00",
             "notes": "Wants to discuss project scope"
           }
         }
       }
     }
   }
   ```
   - The `"type"` must match `CreateMeetingFromWebForm::PROCESS_TYPE`.
   - Your `options` can include whatever data you need in `formData`.
   - Use the SuiteCRM 8 GraphQL endpoint (typically `https://<your-suitecrm-domain>/Api/graphql`).

3. **Handle the Response**  
   - If you see `"status": "success"`, you can show a success message (e.g. “Thank you! We’ve scheduled your consultation.”).
   - If `"status": "error"`, parse the `"messages"` for an error detail.

### 3.5 Final Testing

1. **Submit the form** on your website.
2. **Check** if a new Meeting is created in SuiteCRM 8 (via the Meetings module in the CRM UI).
3. **Verify** any extra fields or custom logic is correct (date/time, description, assigned user, etc.).
4. **Update** as needed.

---

## 4. Extra Considerations

1. **Date/Time Formatting**  
   - Ensure the `preferredDatetime` is in a format SuiteCRM can parse, e.g., `YYYY-MM-DD HH:MM:SS`.
   - Watch for time zones if your website is multi-regional.

2. **Security & Authentication**  
   - Typically, you’d create a dedicated “API User” in SuiteCRM with rights to create Meetings. Your website obtains an OAuth2 token using that user’s credentials.  
   - If you need to allow truly unauthenticated calls, set `requiredAuthRole()` to `''`. But be aware of security implications.

3. **Populating Additional Fields**  
   - Perhaps you want to store the website visitor’s email or phone in a related Contact or Lead record. You could:
     - Create the Contact/Lead first, then relate it to the new Meeting.
     - Or store them in custom fields of the Meeting record itself (e.g., `meetingBean->contact_email = $formData['email'];` if you have a custom field).

4. **Error Handling**  
   - If `validate()` or `run()` encounters a serious issue, set `$process->setStatus('error')` and `$process->setMessages(['...error details...'])`. Your website then can display an error to the user.

5. **Async vs. Sync**  
   - If you want the meeting creation to happen asynchronously (not blocking the user’s browser), set `$process->setAsync(true)` and queue it. However, SuiteCRM’s built-in background job for asynchronous processes is still evolving. The synchronous approach (`setAsync(false)`) is simpler.

---

## 5. Summary

1. **Add** a custom Process Handler in `extensions/<my-extension>/backend/…` implementing `ProcessHandlerInterface`.
2. **Clear** the SuiteCRM cache and verify your class is auto-loaded.
3. **Configure** your website to call the `createProcess` GraphQL mutation with `"type": "create-meeting-from-webform"`.
4. **Validate** that the new Meeting record is created as expected in SuiteCRM.
5. **Enhance** or refine as needed (extra fields, custom validations, ACL logic, etc.).

By following this plan (or simplifying to the built-in `createRecord` approach if you don’t need a custom handler), you can reliably create new Meetings in SuiteCRM 8 whenever a visitor submits your “Schedule a Consultation” form.